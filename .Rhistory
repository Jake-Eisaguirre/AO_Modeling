group_by(weekday, time) %>%
mutate(
difference = round(actual_pred_day - scheduled_pred_day, 0),
diff_se = sqrt((actual_pred_day_upper - actual_pred_day) ^ 2 + (scheduled_pred_day_upper - scheduled_pred_day) ^ 2) / 1.96,
difference_upper = round(difference + 1.96 * diff_se, 0),
difference_lower = round(difference - 1.96 * diff_se, 0)
) %>%
ungroup()
### Visualize the difference with CIs
# Define the output folder (create the folder if it doesn't exist)
output_folder <- "outputs_by_weekday/difference"
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
# Get unique combinations of `weekday`
weekday_combinations <- unique(diff %>% select(weekday))
# Initialize an empty list to store the plots
d_day <- list()
# Loop through each combination of `weekday`
for (i in seq_len(nrow(weekday_combinations))) {
# Extract the specific combination of weekday
day_cat <- weekday_combinations$weekday[i]
# Filter data for the specific combination
combo_data <- diff %>%
filter(weekday == day_cat)
# Create the plot with a horizontal line at y = 0 and CI ribbons
plot <- ggplot(combo_data, aes(x = time, y = difference)) +
geom_line() +
geom_ribbon(aes(ymin = difference_lower, ymax = difference_upper), alpha = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = paste("Difference between Actual and Scheduled Workloads on", day_cat),
x = "Time (Hours)",
y = "Difference (Actual - Scheduled)") +
theme_minimal()
# Store the plot in the list
d_day[[paste0(day_cat)]] <- plot
# Define the file name based on the weekday
file_name <- paste0("workload_differences_", day_cat, "_at_HNL.jpeg")
# Save the plot to the specified folder
ggsave(filename = file.path(output_folder, file_name), plot = plot, width = 8, height = 6)
}
# View the list of plots
d_day
cl <- makeCluster(detectCores() - 1)
# weekend
model_actual_weekend <- bam(actual_workload ~ s(time, by = interaction(weekend_bin, station), k = 50) + station + weekend_bin,
data = clean_data, family = poisson(link="log"), cluster = cl)
model_scheduled_weekend <- bam(sched_workload ~ s(time, by = interaction(weekend_bin, station), k = 50) + station + weekend_bin,
data = clean_data, family = poisson(link="log"), cluster = cl)
stopCluster(cl)
# Create the new data set
n_new <- 518  # Adjust the number of new data points if needed
new_dates <- seq(min(clean_data$date), max(clean_data$date), by = "day")
new_time_intervals <- seq(0, 23.9167, by = 0.0833)  # 5-minute intervals
new_weekdays <- wday(new_dates, label = T)
# Combine into a new dataframe
new_df_weekend <- data.frame(
date = rep(new_dates, each = length(new_time_intervals)),
time = rep(new_time_intervals, times = n_new),
weekday = rep(new_weekdays, each = length(new_time_intervals))
)
new_df_weekend <- new_df_weekend %>%
mutate(
weekend_bin = if_else(weekday %in% c("Sun", "Sat", "Fri"), "weekend", "week")) %>%
group_by(date, time, weekend_bin) %>%
mutate(temp_id = cur_group_id()) %>%
filter(!duplicated(temp_id)) %>%
select(!temp_id)
new_df_weekend_hnl <- new_df_weekend %>%
mutate(station = "HNL")%>%
filter(time  >= t_hnl_min,
time <= t_hnl_max)
new_df_weekend_ito <- new_df_weekend %>%
mutate(station = "ITO")%>%
filter(time  >= t_ito_min,
time <= 20.99)
new_df_weekend_koa <- new_df_weekend %>%
mutate(station = "KOA")%>%
filter(time  >= t_koa_min,
time <= 21.00)
new_df_weekend_lih <- new_df_weekend %>%
mutate(station = "LIH")%>%
filter(time  >= t_lih_min,
time <= 21.89)
new_df_weekend_ogg <- new_df_weekend %>%
mutate(station = "OGG")%>%
filter(time  >= t_ogg_min,
time <= t_lih_max)
new_weekend_weekend <- rbind(new_df_weekend_hnl, new_df_weekend_ito,
new_df_weekend_koa, new_df_weekend_lih,
new_df_weekend_ogg) %>%
group_by(station, time, weekend_bin) %>%
mutate(temp_id = cur_group_id()) %>%
filter(!duplicated(temp_id)) %>%
select(!temp_id) %>%
ungroup(time)
# weekend
pred_actual_weekend <- predict(model_actual_weekend, newdata = new_weekend_weekend, se.fit = TRUE)
new_weekend_weekend$actual_pred_weekend <- exp(pred_actual_weekend$fit)
new_weekend_weekend$actual_pred_weekend_upper <- exp(pred_actual_weekend$fit + 1.96 * pred_actual_weekend$se.fit)
new_weekend_weekend$actual_pred_weekend_lower <- exp(pred_actual_weekend$fit - 1.96 * pred_actual_weekend$se.fit)
pred_scheduled_weekend <- predict(model_scheduled_weekend, newdata = new_weekend_weekend, se.fit = TRUE)
new_weekend_weekend$scheduled_pred_weekend <- exp(pred_scheduled_weekend$fit)
new_weekend_weekend$scheduled_pred_weekend_upper <- exp(pred_scheduled_weekend$fit + 1.96 * pred_scheduled_weekend$se.fit)
new_weekend_weekend$scheduled_pred_weekend_lower <- exp(pred_scheduled_weekend$fit - 1.96 * pred_scheduled_weekend$se.fit)
# Define the output folder (create the folder if it doesn't exist)
output_folder <- "outputs_by_station_weekend/predicted_vs_scheduled_model_results"
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
# Select relevant columns including CI bounds for both workloads
weekend_df <- new_weekend_weekend %>%
select(time, actual_pred_weekend, actual_pred_weekend_upper, actual_pred_weekend_lower,
scheduled_pred_weekend, scheduled_pred_weekend_upper, scheduled_pred_weekend_lower,
weekend_bin, station)
# Get unique combinations of weekend_bin and station from the data
weekend_station_combinations <- unique(new_weekend_weekend %>% select(station, weekend_bin))
# Initialize an empty list to store the plots
v_weekend_station <- list()
# Loop through each combination of weekend_bin and station, create a plot, and save it
for (i in seq_along((weekend_station_combinations$weekend_bin))) {
# Extract the specific combination of weekend_bin and station
weekend_bin_cat <- weekend_station_combinations$weekend_bin[i]
station_cat <- weekend_station_combinations$station[i]
# Filter data for the specific combination
filtered_data <- weekend_df %>%
filter(weekend_bin == weekend_bin_cat,
station == station_cat)
# Create the plot for each combination, adding CIs with geom_ribbon
plot <- ggplot(filtered_data, aes(x = time)) +
# Add ribbon for actual_pred_weekend confidence intervals
geom_ribbon(aes(ymin = actual_pred_weekend_lower, ymax = actual_pred_weekend_upper),
fill = "#413691", alpha = 0.2) +
# Add ribbon for scheduled_pred_weekend confidence intervals
geom_ribbon(aes(ymin = scheduled_pred_weekend_lower, ymax = scheduled_pred_weekend_upper),
fill = "#D2058A", alpha = 0.2) +
# Plot the predicted workloads as lines
geom_line(aes(y = actual_pred_weekend, color = "actual_pred_weekend")) +
geom_line(aes(y = scheduled_pred_weekend, color = "scheduled_pred_weekend")) +
# Add titles and labels
labs(title = paste("Predicted Workloads Over Time at", station_cat, "on", weekend_bin_cat),
x = "Time (Hours)",
y = "Predicted Workload",
color = "Workload Type",
fill = "Workload Type") +
# Set the theme and color scale
theme_minimal() +
scale_color_manual(values = c("actual_pred_weekend" = "#413691", "scheduled_pred_weekend" = "#D2058A"))
# Store the plot in the list
v_weekend_station[[paste0(station_cat, "_on_", weekend_bin_cat)]] <- plot
# Define the file name based on the station and weekend_bin
file_name <- paste0("predicted_workloads_", station_cat, "_on_", weekend_bin_cat, ".jpeg")
# Save the plot to the specified folder
ggsave(filename = file.path(output_folder, file_name), plot = plot, width = 8, height = 6)
}
v_weekend_station
# Define the output folder (create the folder if it doesn't exist)
output_folder <- "outputs_by_station_weekend/difference"
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
# Calculate the difference and CI for differences
diff <- new_weekend_weekend %>%
group_by(weekend_bin, time) %>%
mutate(
# Calculate the difference
difference = actual_pred_weekend - scheduled_pred_weekend,
# Round the difference
difference = round(difference, 0),
# CI bounds for differences
ci_low_diff = round((actual_pred_weekend_lower - scheduled_pred_weekend_upper), 0),
ci_high_diff = round((actual_pred_weekend_upper - scheduled_pred_weekend_lower), 0)
)
# Initialize an empty list to store the plots
d_weekend <- list()
# Get unique combinations of weekend_bin and station
weekend_station_combinations <- unique(new_weekend_weekend %>% select(station, weekend_bin))
# Loop through each combination of weekend_bin and station to create plots
for (i in seq_along(weekend_station_combinations$weekend_bin)) {
# Extract the specific combination of weekend_bin and station
weekend_bin_cat <- weekend_station_combinations$weekend_bin[i]
station_cat <- weekend_station_combinations$station[i]
# Filter data for the specific combination
day_data <- diff %>% filter(weekend_bin == weekend_bin_cat, station == station_cat)
# Create the plot with CI lines and a horizontal line at y = 0
plot <- ggplot(day_data, aes(x = time)) +
# Add CI lines for the differences
geom_ribbon(aes(ymin = ci_low_diff, ymax = ci_high_diff), fill = "#B0B0B0", alpha = 0.5) +
# Add the difference line
geom_line(aes(y = difference)) +
# Add a horizontal line at y = 0
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
# Add titles and labels
labs(title = paste("Differences between Actual and Scheduled Predictions on", weekend_bin_cat, "at", station_cat),
x = "Time (Hours)",
y = "Difference (Actual - Scheduled)") +
theme_minimal()
# Store the plot in the list
d_weekend[[paste0(weekend_bin_cat, "_at_", station_cat)]] <- plot
# Define the file name based on the combination
file_name <- paste0("workload_differences_", weekend_bin_cat, "_at_", station_cat, ".jpeg")
# Save the plot to the specified folder
ggsave(filename = file.path(output_folder, file_name), plot = plot, width = 8, height = 6)
}
# View the list of plots
d_weekend
cl <- makeCluster(detectCores() - 1)
model_actual_ops <- bam(actual_workload ~ s(time, by = ops_change, k = 50) + ops_change, poisson(link = "log"),
data = clean_data, cluster = cl)
model_scheduled_ops <- bam(sched_workload ~ s(time, by = ops_change, k = 50) + ops_change, poisson(link = "log"),
data = clean_data, cluster = cl)
stopCluster(cl)
# Create the new data set
n_new <- 518  # Adjust the number of new data points if needed
new_dates <- seq(min(clean_data$date), max(clean_data$date), by = "day")
new_time_intervals <- seq(0, 23.9167, by = 0.0833)  # 5-minute intervals
# Combine into a new dataframe
new_df_ops <- data.frame(
date = rep(new_dates, each = length(new_time_intervals)),
time = rep(new_time_intervals, times = n_new)
)
new_df_ops <- new_df_ops %>%
mutate(ops_change = if_else(date > "2024-01-24", "post", "pre"))  %>%
group_by(time, ops_change) %>%
mutate(temp_id = cur_group_id()) %>%
filter(!duplicated(temp_id)) %>%
select(!temp_id)
### Predict
# Predict with standard errors for actual operations
pred_actual_ops <- predict(model_actual_ops, newdata = new_df_ops, se.fit = TRUE)
new_df_ops$actual_pred_ops <- exp(pred_actual_ops$fit)
new_df_ops$actual_pred_ops_se <- pred_actual_ops$se.fit
new_df_ops$actual_pred_ops_lower <- exp(pred_actual_ops$fit - 1.96 * pred_actual_ops$se.fit)
new_df_ops$actual_pred_ops_upper <- exp(pred_actual_ops$fit + 1.96 * pred_actual_ops$se.fit)
# Predict with standard errors for scheduled operations
pred_scheduled_ops <- predict(model_scheduled_ops, newdata = new_df_ops, se.fit = TRUE)
new_df_ops$scheduled_pred_ops <- exp(pred_scheduled_ops$fit)
new_df_ops$scheduled_pred_ops_se <- pred_scheduled_ops$se.fit
new_df_ops$scheduled_pred_ops_lower <- exp(pred_scheduled_ops$fit - 1.96 * pred_scheduled_ops$se.fit)
new_df_ops$scheduled_pred_ops_upper <- exp(pred_scheduled_ops$fit + 1.96 * pred_scheduled_ops$se.fit)
# Define the output folder (create the folder if it doesn't exist)
output_folder <- "outputs_by_ops_change/predicted_vs_scheduled_model_results"
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
# No need to pivot the CIs into long format; keep them separate
ops_df <- new_df_ops %>%
select(time, ops_change, actual_pred_ops, actual_pred_ops_upper, actual_pred_ops_lower,
scheduled_pred_ops, scheduled_pred_ops_upper, scheduled_pred_ops_lower)
# Get unique combinations of ops_change
ops_combinations <- unique(ops_df$ops_change)
v_ops <- list()
# Loop through each combination of ops_change and create a plot
for (i in seq_along(ops_combinations)) {
ops_cat <- ops_combinations[i]
# Filter data for the specific ops_change
filtered_data <- ops_df %>%
filter(ops_change == ops_cat)
# Create the plot with CI ribbons
plot <- ggplot(filtered_data, aes(x = time)) +
geom_line(aes(y = actual_pred_ops, color = "actual_pred_ops")) +
geom_ribbon(aes(ymin = actual_pred_ops_lower, ymax = actual_pred_ops_upper, fill = "actual_pred_ops"), alpha = 0.2) +
geom_line(aes(y = scheduled_pred_ops, color = "scheduled_pred_ops")) +
geom_ribbon(aes(ymin = scheduled_pred_ops_lower, ymax = scheduled_pred_ops_upper, fill = "scheduled_pred_ops"), alpha = 0.2) +
labs(title = paste("Predicted Workloads Over Time with CIs on", ops_cat),
x = "Time (Hours)",
y = "Predicted Workload",
color = "Workload Type",
fill = "Workload Type") +
theme_minimal() +
scale_color_manual(values = c("actual_pred_ops" = "#413691", "scheduled_pred_ops" = "#D2058A")) +
scale_fill_manual(values = c("actual_pred_ops" = "#413691", "scheduled_pred_ops" = "#D2058A"))
# Store the plot in the list
v_ops[[paste0(ops_cat)]] <- plot
# Define the file name based on the ops_change
file_name <- paste0("predicted_workloads_", ops_cat, ".jpeg")
# Save the plot to the specified folder
ggsave(filename = file.path(output_folder, file_name), plot = plot, width = 8, height = 6)
}
# View the list of plots
v_ops
# Define the output folder (create the folder if it doesn't exist)
output_folder <- "outputs_by_ops_change/difference"
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
# Calculate the standard error of the difference
diff <- new_df_ops %>%
group_by(ops_change, time) %>%
mutate(
difference = round(actual_pred_ops - scheduled_pred_ops, 0),
se_diff = sqrt(actual_pred_ops_se^2 + scheduled_pred_ops_se^2),
difference_lower = round(difference - 1.96 * se_diff, 0),
difference_upper = round(difference + 1.96 * se_diff, 0)
) %>%
ungroup() %>%
select(ops_change, time, difference, difference_lower, difference_upper)
# Initialize an empty list to store the plots
d_ops <- list()
# Get unique ops_changes from the data
op_change <- unique(diff$ops_change)
# Loop through each ops_change and create a plot, storing them in the list
for(i in seq_along(op_change)) {
op_change_cat <- op_change[i]
# Filter data for the specific ops_change
day_data <- diff %>% filter(ops_change == op_change_cat)
# Create the plot with CI ribbons
plot <- ggplot(day_data, aes(x = time, y = difference)) +
geom_line() +
geom_ribbon(aes(ymin = difference_lower, ymax = difference_upper), alpha = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = paste("Distribution of Differences between Actual and Scheduled Predictions on", op_change_cat),
x = "Time (Hours)",
y = "Difference (Actual - Scheduled)") +
theme_minimal() +
ylim(min(diff$difference_lower), max(diff$difference_upper))
# Store the plot in the list
d_ops[[paste0(op_change_cat)]] <- plot
# Define the file name based on the ops_change
file_name <- paste0("workload_differences_", op_change_cat, ".jpeg")
# Save the plot to the specified folder
ggsave(filename = file.path(output_folder, file_name), plot = plot, width = 8, height = 6)
}
# View the list of plots
d_ops
clean_ao_acutal <- read_csv(here("data", "clean_ao_actual.csv"), col_types = cols())%>%
mutate(weekend_bin = as.factor(if_else(weekday %in% c("Sun", "Sat", "Fri"), "weekend", "week")))
clean_hnl_dt <- clean_data %>%
filter(station == "HNL",
date > min(clean_ao_acutal$date),
date < max(clean_ao_acutal$date))
cl <- makeCluster(detectCores() - 1)
model_actual_hnl <- bam(actual_workload ~ s(time, by = weekend_bin, k = 50) + weekend_bin, poisson(link = "log"),
data = clean_hnl_dt, cluster = cl)
model_scheduled_hnl <- bam(sched_workload ~ s(time, by = weekend_bin, k = 50)+ weekend_bin, poisson(link = "log"),
data = clean_hnl_dt, cluster = cl)
model_ao_actual_hnl <- bam(actual_workload ~ s(time, by = weekend_bin, k = 50)+ weekend_bin, poisson(link = "log"),
data = clean_ao_acutal, cluster = cl)
stopCluster(cl)
new_time_intervals <- seq(0, 23.9167, by = 0.0833)  # 5-minute intervals
#new_weekdays <- wday(new_dates, label = T)
# Combine into a new dataframe
new_df_ao <- data.frame(
time = rep(new_time_intervals)
)
wk <- new_df_ao %>%
mutate(weekend_bin ="weekend")
wknd <- new_df_ao %>%
mutate(weekend_bin = "week")
new_df_ao <- rbind(wk, wknd)
### Predict
# Predict with standard errors for actual operations
pred_actual_hnl <- predict(model_actual_hnl, newdata = new_df_ao, se.fit = TRUE)
new_df_ao$actual_pred_hnl <- exp(pred_actual_hnl$fit)
new_df_ao$actual_pred_hnl_se <- pred_actual_hnl$se.fit
new_df_ao$actual_pred_hnl_lower <- exp(pred_actual_hnl$fit - 1.96 * pred_actual_hnl$se.fit)
new_df_ao$actual_pred_hnl_upper <- exp(pred_actual_hnl$fit + 1.96 * pred_actual_hnl$se.fit)
# Predict with standard errors for scheduled operations
pred_scheduled_hnl <- predict(model_scheduled_hnl, newdata = new_df_ao, se.fit = TRUE)
new_df_ao$scheduled_pred_hnl <- exp(pred_scheduled_hnl$fit)
new_df_ao$scheduled_pred_hnl_se <- pred_scheduled_hnl$se.fit
new_df_ao$scheduled_pred_hnl_lower <- exp(pred_scheduled_hnl$fit - 1.96 * pred_scheduled_hnl$se.fit)
new_df_ao$scheduled_pred_hnl_upper <- exp(pred_scheduled_hnl$fit + 1.96 * pred_scheduled_hnl$se.fit)
# Predict with standard errors for scheduled operations
pred_actual_hnl_ao <- predict(model_ao_actual_hnl, newdata = new_df_ao, se.fit = TRUE)
new_df_ao$actual_pred_hnl_ao <- exp(pred_actual_hnl_ao$fit)
new_df_ao$actual_pred_hnl_ao_se <- pred_actual_hnl_ao$se.fit
new_df_ao$actual_pred_hnl_ao_lower <- exp(pred_actual_hnl_ao$fit - 1.96 * pred_actual_hnl_ao$se.fit)
new_df_ao$actual_pred_hnl_ao_upper <- exp(pred_actual_hnl_ao$fit + 1.96 * pred_actual_hnl_ao$se.fit)
# Define the output folder (create the folder if it doesn't exist)
output_folder <- "outputs_by_weekend_ao/predicted_vs_scheduled_model_results"
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
weekend_ao_df <- new_df_ao %>%
select(time, actual_pred_hnl, actual_pred_hnl_lower, actual_pred_hnl_upper,
scheduled_pred_hnl, scheduled_pred_hnl_lower, scheduled_pred_hnl_upper, actual_pred_hnl_ao, actual_pred_hnl_ao_lower, actual_pred_hnl_ao_upper,
weekend_bin)
# Get unique combinations of weekend_bin and station from the data
weekend_combinations <- unique(weekend_ao_df %>% select(weekend_bin))
# Initialize an empty list to store the plots
v_weekend_ao <- list()
# Loop through each combination of weekend_bin and station, create a plot, and save it
for (i in seq_along((weekend_combinations$weekend_bin))) {
# Extract the specific combination of weekend_bin and station
weekend_bin_cat <- weekend_combinations$weekend_bin[i]
# Filter data for the specific combination
filtered_data <- weekend_ao_df %>%
filter(weekend_bin == weekend_bin_cat)
plot <- ggplot(filtered_data, aes(x = time)) +
geom_line(aes(y = actual_pred_hnl, color = "actual_pred_hnl")) +
geom_ribbon(aes(ymin = actual_pred_hnl_lower, ymax = actual_pred_hnl_upper, fill = "actual_pred_hnl"), alpha = 0.2) +
geom_line(aes(y = scheduled_pred_hnl, color = "scheduled_pred_hnl")) +
geom_ribbon(aes(ymin = scheduled_pred_hnl_lower, ymax = scheduled_pred_hnl_upper, fill = "scheduled_pred_hnl"), alpha = 0.2) +
geom_line(aes(y = actual_pred_hnl_ao, color = "actual_pred_hnl_ao")) +
geom_ribbon(aes(ymin = actual_pred_hnl_ao_lower, ymax = actual_pred_hnl_ao_upper, fill = "actual_pred_hnl_ao"), alpha = 0.2) +
labs(title = paste("Predicted Workloads Over Time with CIs at HNL on", weekend_bin_cat),
x = "Time (Hours)",
y = "Predicted Workload",
color = "Workload Type",
fill = "Workload Type") +
theme_minimal() +
scale_color_manual(values = c("actual_pred_hnl" = "#413691", "scheduled_pred_hnl" = "#D2058A", "actual_pred_hnl_ao" = "green")) +
scale_fill_manual(values = c("actual_pred_hnl" = "#413691", "scheduled_pred_hnl" = "#D2058A", "actual_pred_hnl_ao" = "green"))
# Store the plot in the list
v_weekend_ao[[paste0("HNL_on_", weekend_bin_cat)]] <- plot
# Define the file name based on the station and weekend_bin
file_name <- paste0("predicted_workloads_HNL_on_", weekend_bin_cat, ".jpeg")
# Save the plot to the specified folder
ggsave(filename = file.path(output_folder, file_name), plot = plot, width = 8, height = 6)
}
v_weekend_ao
# Define the output folder (create the folder if it doesn't exist)
output_folder <- "outputs_by_weekend_ao/difference"
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
# Calculate the difference and CI for differences
diff <- new_df_ao %>%
group_by(weekend_bin, time) %>%
mutate(
# Calculate the difference
difference = actual_pred_hnl - scheduled_pred_hnl,
# Round the difference
difference = round(difference, 0),
# CI bounds for differences
ci_low_diff = round((actual_pred_hnl_lower - scheduled_pred_hnl_upper), 0),
ci_high_diff = round((actual_pred_hnl_upper - scheduled_pred_hnl_lower), 0)
)
# Initialize an empty list to store the plots
d_weekend <- list()
# Get unique combinations of weekend_bin and station
weekend_combinations <- unique(new_df_ao %>% select(weekend_bin))
# Loop through each combination of weekend_bin and station to create plots
for (i in seq_along(weekend_combinations$weekend_bin)) {
# Extract the specific combination of weekend_bin and station
weekend_bin_cat <- weekend_station_combinations$weekend_bin[i]
#station_cat <- weekend_station_combinations$station[i]
# Filter data for the specific combination
day_data <- diff %>% filter(weekend_bin == weekend_bin_cat)
# Create the plot with CI lines and a horizontal line at y = 0
plot <- ggplot(day_data, aes(x = time)) +
# Add CI lines for the differences
geom_ribbon(aes(ymin = ci_low_diff, ymax = ci_high_diff), fill = "#B0B0B0", alpha = 0.5) +
# Add the difference line
geom_line(aes(y = difference)) +
# Add a horizontal line at y = 0
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
# Add titles and labels
labs(title = paste("Differences between Actual and Scheduled Predictions on", weekend_bin_cat, "at HNL"),
x = "Time (Hours)",
y = "Difference (Actual - Scheduled)") +
theme_minimal()
# Store the plot in the list
d_weekend[[paste0(weekend_bin_cat, "_at_HNL")]] <- plot
# Define the file name based on the combination
file_name <- paste0("workload_differences_", weekend_bin_cat, "_at_HNL.jpeg")
# Save the plot to the specified folder
ggsave(filename = file.path(output_folder, file_name), plot = plot, width = 8, height = 6)
}
# View the list of plots
d_weekend
# Define the output folder (create the folder if it doesn't exist)
output_folder <- "outputs_by_weekend_ao/difference"
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
# Calculate the difference and CI for differences
diff <- new_df_ao %>%
group_by(weekend_bin, time) %>%
mutate(
# Calculate the difference
difference = actual_pred_hnl_ao - scheduled_pred_hnl,
# Round the difference
difference = round(difference, 0),
# CI bounds for differences
ci_low_diff = round((actual_pred_hnl_ao_lower - scheduled_pred_hnl_upper), 0),
ci_high_diff = round((actual_pred_hnl_ao_upper - scheduled_pred_hnl_lower), 0)
)
# Initialize an empty list to store the plots
d_weekend <- list()
# Get unique combinations of weekend_bin and station
weekend_combinations <- unique(new_df_ao %>% select(weekend_bin))
# Loop through each combination of weekend_bin and station to create plots
for (i in seq_along(weekend_combinations$weekend_bin)) {
# Extract the specific combination of weekend_bin and station
weekend_bin_cat <- weekend_station_combinations$weekend_bin[i]
#station_cat <- weekend_station_combinations$station[i]
# Filter data for the specific combination
day_data <- diff %>% filter(weekend_bin == weekend_bin_cat)
# Create the plot with CI lines and a horizontal line at y = 0
plot <- ggplot(day_data, aes(x = time)) +
# Add CI lines for the differences
geom_ribbon(aes(ymin = ci_low_diff, ymax = ci_high_diff), fill = "#B0B0B0", alpha = 0.5) +
# Add the difference line
geom_line(aes(y = difference)) +
# Add a horizontal line at y = 0
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
# Add titles and labels
labs(title = paste("Differences between Actual AO and Scheduled Predictions on", weekend_bin_cat, "at HNL"),
x = "Time (Hours)",
y = "Difference (Actual - Scheduled)") +
theme_minimal()
# Store the plot in the list
d_weekend[[paste0(weekend_bin_cat, "_at_HNL")]] <- plot
# Define the file name based on the combination
file_name <- paste0("workload_differences_AO_", weekend_bin_cat, "_at_HNL.jpeg")
# Save the plot to the specified folder
ggsave(filename = file.path(output_folder, file_name), plot = plot, width = 8, height = 6)
}
# View the list of plots
d_weekend
